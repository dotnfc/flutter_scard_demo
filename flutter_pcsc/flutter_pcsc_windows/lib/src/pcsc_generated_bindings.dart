// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to winscard.dll
class NativeLibraryWinscard {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibraryWinscard(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibraryWinscard.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT0Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT0Pci');

  SCARD_IO_REQUEST get g_rgSCardT0Pci => _g_rgSCardT0Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT1Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT1Pci');

  SCARD_IO_REQUEST get g_rgSCardT1Pci => _g_rgSCardT1Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardRawPci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardRawPci');

  SCARD_IO_REQUEST get g_rgSCardRawPci => _g_rgSCardRawPci.ref;

  int SCardEstablishContext(
    int dwScope,
    LPCVOID pvReserved1,
    LPCVOID pvReserved2,
    LPSCARDCONTEXT phContext,
  ) {
    return _SCardEstablishContext(
      dwScope,
      pvReserved1,
      pvReserved2,
      phContext,
    );
  }

  late final _SCardEstablishContextPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(DWORD, LPCVOID, LPCVOID,
              LPSCARDCONTEXT)>>('SCardEstablishContext');
  late final _SCardEstablishContext = _SCardEstablishContextPtr.asFunction<
      int Function(int, LPCVOID, LPCVOID, LPSCARDCONTEXT)>();

  int SCardReleaseContext(
    int hContext,
  ) {
    return _SCardReleaseContext(
      hContext,
    );
  }

  late final _SCardReleaseContextPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>(
          'SCardReleaseContext');
  late final _SCardReleaseContext =
      _SCardReleaseContextPtr.asFunction<int Function(int)>();

  int SCardIsValidContext(
    int hContext,
  ) {
    return _SCardIsValidContext(
      hContext,
    );
  }

  late final _SCardIsValidContextPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>(
          'SCardIsValidContext');
  late final _SCardIsValidContext =
      _SCardIsValidContextPtr.asFunction<int Function(int)>();

  int SCardListReaderGroupsA(
    int hContext,
    LPSTR mszGroups,
    LPDWORD pcchGroups,
  ) {
    return _SCardListReaderGroupsA(
      hContext,
      mszGroups,
      pcchGroups,
    );
  }

  late final _SCardListReaderGroupsAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPSTR, LPDWORD)>>(
          'SCardListReaderGroupsA');
  late final _SCardListReaderGroupsA = _SCardListReaderGroupsAPtr.asFunction<
      int Function(int, LPSTR, LPDWORD)>();

  int SCardListReaderGroupsW(
    int hContext,
    LPWSTR mszGroups,
    LPDWORD pcchGroups,
  ) {
    return _SCardListReaderGroupsW(
      hContext,
      mszGroups,
      pcchGroups,
    );
  }

  late final _SCardListReaderGroupsWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPWSTR, LPDWORD)>>(
          'SCardListReaderGroupsW');
  late final _SCardListReaderGroupsW = _SCardListReaderGroupsWPtr.asFunction<
      int Function(int, LPWSTR, LPDWORD)>();

  int SCardListReadersA(
    int hContext,
    LPCSTR mszGroups,
    LPSTR mszReaders,
    LPDWORD pcchReaders,
  ) {
    return _SCardListReadersA(
      hContext,
      mszGroups,
      mszReaders,
      pcchReaders,
    );
  }

  late final _SCardListReadersAPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPSTR, LPDWORD)>>(
      'SCardListReadersA');
  late final _SCardListReadersA = _SCardListReadersAPtr.asFunction<
      int Function(int, LPCSTR, LPSTR, LPDWORD)>();

  int SCardListReadersW(
    int hContext,
    LPCWSTR mszGroups,
    LPWSTR mszReaders,
    LPDWORD pcchReaders,
  ) {
    return _SCardListReadersW(
      hContext,
      mszGroups,
      mszReaders,
      pcchReaders,
    );
  }

  late final _SCardListReadersWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDCONTEXT, LPCWSTR, LPWSTR, LPDWORD)>>('SCardListReadersW');
  late final _SCardListReadersW = _SCardListReadersWPtr.asFunction<
      int Function(int, LPCWSTR, LPWSTR, LPDWORD)>();

  int SCardListCardsA(
    int hContext,
    LPCBYTE pbAtr,
    LPCGUID rgquidInterfaces,
    int cguidInterfaceCount,
    ffi.Pointer<CHAR> mszCards,
    LPDWORD pcchCards,
  ) {
    return _SCardListCardsA(
      hContext,
      pbAtr,
      rgquidInterfaces,
      cguidInterfaceCount,
      mszCards,
      pcchCards,
    );
  }

  late final _SCardListCardsAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCBYTE, LPCGUID, DWORD,
              ffi.Pointer<CHAR>, LPDWORD)>>('SCardListCardsA');
  late final _SCardListCardsA = _SCardListCardsAPtr.asFunction<
      int Function(int, LPCBYTE, LPCGUID, int, ffi.Pointer<CHAR>, LPDWORD)>();

  int SCardListCardsW(
    int hContext,
    LPCBYTE pbAtr,
    LPCGUID rgquidInterfaces,
    int cguidInterfaceCount,
    ffi.Pointer<WCHAR> mszCards,
    LPDWORD pcchCards,
  ) {
    return _SCardListCardsW(
      hContext,
      pbAtr,
      rgquidInterfaces,
      cguidInterfaceCount,
      mszCards,
      pcchCards,
    );
  }

  late final _SCardListCardsWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCBYTE, LPCGUID, DWORD,
              ffi.Pointer<WCHAR>, LPDWORD)>>('SCardListCardsW');
  late final _SCardListCardsW = _SCardListCardsWPtr.asFunction<
      int Function(int, LPCBYTE, LPCGUID, int, ffi.Pointer<WCHAR>, LPDWORD)>();

  int SCardListInterfacesA(
    int hContext,
    LPCSTR szCard,
    LPGUID pguidInterfaces,
    LPDWORD pcguidInterfaces,
  ) {
    return _SCardListInterfacesA(
      hContext,
      szCard,
      pguidInterfaces,
      pcguidInterfaces,
    );
  }

  late final _SCardListInterfacesAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDCONTEXT, LPCSTR, LPGUID, LPDWORD)>>('SCardListInterfacesA');
  late final _SCardListInterfacesA = _SCardListInterfacesAPtr.asFunction<
      int Function(int, LPCSTR, LPGUID, LPDWORD)>();

  int SCardListInterfacesW(
    int hContext,
    LPCWSTR szCard,
    LPGUID pguidInterfaces,
    LPDWORD pcguidInterfaces,
  ) {
    return _SCardListInterfacesW(
      hContext,
      szCard,
      pguidInterfaces,
      pcguidInterfaces,
    );
  }

  late final _SCardListInterfacesWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDCONTEXT, LPCWSTR, LPGUID, LPDWORD)>>('SCardListInterfacesW');
  late final _SCardListInterfacesW = _SCardListInterfacesWPtr.asFunction<
      int Function(int, LPCWSTR, LPGUID, LPDWORD)>();

  int SCardGetProviderIdA(
    int hContext,
    LPCSTR szCard,
    LPGUID pguidProviderId,
  ) {
    return _SCardGetProviderIdA(
      hContext,
      szCard,
      pguidProviderId,
    );
  }

  late final _SCardGetProviderIdAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPGUID)>>(
          'SCardGetProviderIdA');
  late final _SCardGetProviderIdA =
      _SCardGetProviderIdAPtr.asFunction<int Function(int, LPCSTR, LPGUID)>();

  int SCardGetProviderIdW(
    int hContext,
    LPCWSTR szCard,
    LPGUID pguidProviderId,
  ) {
    return _SCardGetProviderIdW(
      hContext,
      szCard,
      pguidProviderId,
    );
  }

  late final _SCardGetProviderIdWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR, LPGUID)>>(
          'SCardGetProviderIdW');
  late final _SCardGetProviderIdW =
      _SCardGetProviderIdWPtr.asFunction<int Function(int, LPCWSTR, LPGUID)>();

  int SCardGetCardTypeProviderNameA(
    int hContext,
    LPCSTR szCardName,
    int dwProviderId,
    ffi.Pointer<CHAR> szProvider,
    LPDWORD pcchProvider,
  ) {
    return _SCardGetCardTypeProviderNameA(
      hContext,
      szCardName,
      dwProviderId,
      szProvider,
      pcchProvider,
    );
  }

  late final _SCardGetCardTypeProviderNameAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCSTR, DWORD, ffi.Pointer<CHAR>,
              LPDWORD)>>('SCardGetCardTypeProviderNameA');
  late final _SCardGetCardTypeProviderNameA = _SCardGetCardTypeProviderNameAPtr
      .asFunction<int Function(int, LPCSTR, int, ffi.Pointer<CHAR>, LPDWORD)>();

  int SCardGetCardTypeProviderNameW(
    int hContext,
    LPCWSTR szCardName,
    int dwProviderId,
    ffi.Pointer<WCHAR> szProvider,
    LPDWORD pcchProvider,
  ) {
    return _SCardGetCardTypeProviderNameW(
      hContext,
      szCardName,
      dwProviderId,
      szProvider,
      pcchProvider,
    );
  }

  late final _SCardGetCardTypeProviderNameWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, DWORD, ffi.Pointer<WCHAR>,
              LPDWORD)>>('SCardGetCardTypeProviderNameW');
  late final _SCardGetCardTypeProviderNameW =
      _SCardGetCardTypeProviderNameWPtr.asFunction<
          int Function(int, LPCWSTR, int, ffi.Pointer<WCHAR>, LPDWORD)>();

  int SCardIntroduceReaderGroupA(
    int hContext,
    LPCSTR szGroupName,
  ) {
    return _SCardIntroduceReaderGroupA(
      hContext,
      szGroupName,
    );
  }

  late final _SCardIntroduceReaderGroupAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR)>>(
          'SCardIntroduceReaderGroupA');
  late final _SCardIntroduceReaderGroupA =
      _SCardIntroduceReaderGroupAPtr.asFunction<int Function(int, LPCSTR)>();

  int SCardIntroduceReaderGroupW(
    int hContext,
    LPCWSTR szGroupName,
  ) {
    return _SCardIntroduceReaderGroupW(
      hContext,
      szGroupName,
    );
  }

  late final _SCardIntroduceReaderGroupWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR)>>(
          'SCardIntroduceReaderGroupW');
  late final _SCardIntroduceReaderGroupW =
      _SCardIntroduceReaderGroupWPtr.asFunction<int Function(int, LPCWSTR)>();

  int SCardForgetReaderGroupA(
    int hContext,
    LPCSTR szGroupName,
  ) {
    return _SCardForgetReaderGroupA(
      hContext,
      szGroupName,
    );
  }

  late final _SCardForgetReaderGroupAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR)>>(
          'SCardForgetReaderGroupA');
  late final _SCardForgetReaderGroupA =
      _SCardForgetReaderGroupAPtr.asFunction<int Function(int, LPCSTR)>();

  int SCardForgetReaderGroupW(
    int hContext,
    LPCWSTR szGroupName,
  ) {
    return _SCardForgetReaderGroupW(
      hContext,
      szGroupName,
    );
  }

  late final _SCardForgetReaderGroupWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR)>>(
          'SCardForgetReaderGroupW');
  late final _SCardForgetReaderGroupW =
      _SCardForgetReaderGroupWPtr.asFunction<int Function(int, LPCWSTR)>();

  int SCardIntroduceReaderA(
    int hContext,
    LPCSTR szReaderName,
    LPCSTR szDeviceName,
  ) {
    return _SCardIntroduceReaderA(
      hContext,
      szReaderName,
      szDeviceName,
    );
  }

  late final _SCardIntroduceReaderAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPCSTR)>>(
          'SCardIntroduceReaderA');
  late final _SCardIntroduceReaderA =
      _SCardIntroduceReaderAPtr.asFunction<int Function(int, LPCSTR, LPCSTR)>();

  int SCardIntroduceReaderW(
    int hContext,
    LPCWSTR szReaderName,
    LPCWSTR szDeviceName,
  ) {
    return _SCardIntroduceReaderW(
      hContext,
      szReaderName,
      szDeviceName,
    );
  }

  late final _SCardIntroduceReaderWPtr = _lookup<
          ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR, LPCWSTR)>>(
      'SCardIntroduceReaderW');
  late final _SCardIntroduceReaderW = _SCardIntroduceReaderWPtr.asFunction<
      int Function(int, LPCWSTR, LPCWSTR)>();

  int SCardForgetReaderA(
    int hContext,
    LPCSTR szReaderName,
  ) {
    return _SCardForgetReaderA(
      hContext,
      szReaderName,
    );
  }

  late final _SCardForgetReaderAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR)>>(
          'SCardForgetReaderA');
  late final _SCardForgetReaderA =
      _SCardForgetReaderAPtr.asFunction<int Function(int, LPCSTR)>();

  int SCardForgetReaderW(
    int hContext,
    LPCWSTR szReaderName,
  ) {
    return _SCardForgetReaderW(
      hContext,
      szReaderName,
    );
  }

  late final _SCardForgetReaderWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR)>>(
          'SCardForgetReaderW');
  late final _SCardForgetReaderW =
      _SCardForgetReaderWPtr.asFunction<int Function(int, LPCWSTR)>();

  int SCardAddReaderToGroupA(
    int hContext,
    LPCSTR szReaderName,
    LPCSTR szGroupName,
  ) {
    return _SCardAddReaderToGroupA(
      hContext,
      szReaderName,
      szGroupName,
    );
  }

  late final _SCardAddReaderToGroupAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPCSTR)>>(
          'SCardAddReaderToGroupA');
  late final _SCardAddReaderToGroupA = _SCardAddReaderToGroupAPtr.asFunction<
      int Function(int, LPCSTR, LPCSTR)>();

  int SCardAddReaderToGroupW(
    int hContext,
    LPCWSTR szReaderName,
    LPCWSTR szGroupName,
  ) {
    return _SCardAddReaderToGroupW(
      hContext,
      szReaderName,
      szGroupName,
    );
  }

  late final _SCardAddReaderToGroupWPtr = _lookup<
          ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR, LPCWSTR)>>(
      'SCardAddReaderToGroupW');
  late final _SCardAddReaderToGroupW = _SCardAddReaderToGroupWPtr.asFunction<
      int Function(int, LPCWSTR, LPCWSTR)>();

  int SCardRemoveReaderFromGroupA(
    int hContext,
    LPCSTR szReaderName,
    LPCSTR szGroupName,
  ) {
    return _SCardRemoveReaderFromGroupA(
      hContext,
      szReaderName,
      szGroupName,
    );
  }

  late final _SCardRemoveReaderFromGroupAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPCSTR)>>(
          'SCardRemoveReaderFromGroupA');
  late final _SCardRemoveReaderFromGroupA = _SCardRemoveReaderFromGroupAPtr
      .asFunction<int Function(int, LPCSTR, LPCSTR)>();

  int SCardRemoveReaderFromGroupW(
    int hContext,
    LPCWSTR szReaderName,
    LPCWSTR szGroupName,
  ) {
    return _SCardRemoveReaderFromGroupW(
      hContext,
      szReaderName,
      szGroupName,
    );
  }

  late final _SCardRemoveReaderFromGroupWPtr = _lookup<
          ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR, LPCWSTR)>>(
      'SCardRemoveReaderFromGroupW');
  late final _SCardRemoveReaderFromGroupW = _SCardRemoveReaderFromGroupWPtr
      .asFunction<int Function(int, LPCWSTR, LPCWSTR)>();

  int SCardIntroduceCardTypeA(
    int hContext,
    LPCSTR szCardName,
    LPCGUID pguidPrimaryProvider,
    LPCGUID rgguidInterfaces,
    int dwInterfaceCount,
    LPCBYTE pbAtr,
    LPCBYTE pbAtrMask,
    int cbAtrLen,
  ) {
    return _SCardIntroduceCardTypeA(
      hContext,
      szCardName,
      pguidPrimaryProvider,
      rgguidInterfaces,
      dwInterfaceCount,
      pbAtr,
      pbAtrMask,
      cbAtrLen,
    );
  }

  late final _SCardIntroduceCardTypeAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCSTR, LPCGUID, LPCGUID, DWORD, LPCBYTE,
              LPCBYTE, DWORD)>>('SCardIntroduceCardTypeA');
  late final _SCardIntroduceCardTypeA = _SCardIntroduceCardTypeAPtr.asFunction<
      int Function(
          int, LPCSTR, LPCGUID, LPCGUID, int, LPCBYTE, LPCBYTE, int)>();

  int SCardIntroduceCardTypeW(
    int hContext,
    LPCWSTR szCardName,
    LPCGUID pguidPrimaryProvider,
    LPCGUID rgguidInterfaces,
    int dwInterfaceCount,
    LPCBYTE pbAtr,
    LPCBYTE pbAtrMask,
    int cbAtrLen,
  ) {
    return _SCardIntroduceCardTypeW(
      hContext,
      szCardName,
      pguidPrimaryProvider,
      rgguidInterfaces,
      dwInterfaceCount,
      pbAtr,
      pbAtrMask,
      cbAtrLen,
    );
  }

  late final _SCardIntroduceCardTypeWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, LPCGUID, LPCGUID, DWORD, LPCBYTE,
              LPCBYTE, DWORD)>>('SCardIntroduceCardTypeW');
  late final _SCardIntroduceCardTypeW = _SCardIntroduceCardTypeWPtr.asFunction<
      int Function(
          int, LPCWSTR, LPCGUID, LPCGUID, int, LPCBYTE, LPCBYTE, int)>();

  int SCardSetCardTypeProviderNameA(
    int hContext,
    LPCSTR szCardName,
    int dwProviderId,
    LPCSTR szProvider,
  ) {
    return _SCardSetCardTypeProviderNameA(
      hContext,
      szCardName,
      dwProviderId,
      szProvider,
    );
  }

  late final _SCardSetCardTypeProviderNameAPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, DWORD, LPCSTR)>>(
      'SCardSetCardTypeProviderNameA');
  late final _SCardSetCardTypeProviderNameA = _SCardSetCardTypeProviderNameAPtr
      .asFunction<int Function(int, LPCSTR, int, LPCSTR)>();

  int SCardSetCardTypeProviderNameW(
    int hContext,
    LPCWSTR szCardName,
    int dwProviderId,
    LPCWSTR szProvider,
  ) {
    return _SCardSetCardTypeProviderNameW(
      hContext,
      szCardName,
      dwProviderId,
      szProvider,
    );
  }

  late final _SCardSetCardTypeProviderNameWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, DWORD,
              LPCWSTR)>>('SCardSetCardTypeProviderNameW');
  late final _SCardSetCardTypeProviderNameW = _SCardSetCardTypeProviderNameWPtr
      .asFunction<int Function(int, LPCWSTR, int, LPCWSTR)>();

  int SCardForgetCardTypeA(
    int hContext,
    LPCSTR szCardName,
  ) {
    return _SCardForgetCardTypeA(
      hContext,
      szCardName,
    );
  }

  late final _SCardForgetCardTypeAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR)>>(
          'SCardForgetCardTypeA');
  late final _SCardForgetCardTypeA =
      _SCardForgetCardTypeAPtr.asFunction<int Function(int, LPCSTR)>();

  int SCardForgetCardTypeW(
    int hContext,
    LPCWSTR szCardName,
  ) {
    return _SCardForgetCardTypeW(
      hContext,
      szCardName,
    );
  }

  late final _SCardForgetCardTypeWPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR)>>(
          'SCardForgetCardTypeW');
  late final _SCardForgetCardTypeW =
      _SCardForgetCardTypeWPtr.asFunction<int Function(int, LPCWSTR)>();

  /// /////////////////////////////////////////////////////////////////////////////
  int SCardFreeMemory(
    int hContext,
    LPCVOID pvMem,
  ) {
    return _SCardFreeMemory(
      hContext,
      pvMem,
    );
  }

  late final _SCardFreeMemoryPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCVOID)>>(
          'SCardFreeMemory');
  late final _SCardFreeMemory =
      _SCardFreeMemoryPtr.asFunction<int Function(int, LPCVOID)>();

  HANDLE SCardAccessStartedEvent() {
    return _SCardAccessStartedEvent();
  }

  late final _SCardAccessStartedEventPtr =
      _lookup<ffi.NativeFunction<HANDLE Function()>>('SCardAccessStartedEvent');
  late final _SCardAccessStartedEvent =
      _SCardAccessStartedEventPtr.asFunction<HANDLE Function()>();

  void SCardReleaseStartedEvent() {
    return _SCardReleaseStartedEvent();
  }

  late final _SCardReleaseStartedEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'SCardReleaseStartedEvent');
  late final _SCardReleaseStartedEvent =
      _SCardReleaseStartedEventPtr.asFunction<void Function()>();

  int SCardLocateCardsA(
    int hContext,
    LPCSTR mszCards,
    LPSCARD_READERSTATEA rgReaderStates,
    int cReaders,
  ) {
    return _SCardLocateCardsA(
      hContext,
      mszCards,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardLocateCardsAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCSTR, LPSCARD_READERSTATEA,
              DWORD)>>('SCardLocateCardsA');
  late final _SCardLocateCardsA = _SCardLocateCardsAPtr.asFunction<
      int Function(int, LPCSTR, LPSCARD_READERSTATEA, int)>();

  int SCardLocateCardsW(
    int hContext,
    LPCWSTR mszCards,
    LPSCARD_READERSTATEW rgReaderStates,
    int cReaders,
  ) {
    return _SCardLocateCardsW(
      hContext,
      mszCards,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardLocateCardsWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, LPSCARD_READERSTATEW,
              DWORD)>>('SCardLocateCardsW');
  late final _SCardLocateCardsW = _SCardLocateCardsWPtr.asFunction<
      int Function(int, LPCWSTR, LPSCARD_READERSTATEW, int)>();

  int SCardLocateCardsByATRA(
    int hContext,
    LPSCARD_ATRMASK rgAtrMasks,
    int cAtrs,
    LPSCARD_READERSTATEA rgReaderStates,
    int cReaders,
  ) {
    return _SCardLocateCardsByATRA(
      hContext,
      rgAtrMasks,
      cAtrs,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardLocateCardsByATRAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPSCARD_ATRMASK, DWORD,
              LPSCARD_READERSTATEA, DWORD)>>('SCardLocateCardsByATRA');
  late final _SCardLocateCardsByATRA = _SCardLocateCardsByATRAPtr.asFunction<
      int Function(int, LPSCARD_ATRMASK, int, LPSCARD_READERSTATEA, int)>();

  int SCardLocateCardsByATRW(
    int hContext,
    LPSCARD_ATRMASK rgAtrMasks,
    int cAtrs,
    LPSCARD_READERSTATEW rgReaderStates,
    int cReaders,
  ) {
    return _SCardLocateCardsByATRW(
      hContext,
      rgAtrMasks,
      cAtrs,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardLocateCardsByATRWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPSCARD_ATRMASK, DWORD,
              LPSCARD_READERSTATEW, DWORD)>>('SCardLocateCardsByATRW');
  late final _SCardLocateCardsByATRW = _SCardLocateCardsByATRWPtr.asFunction<
      int Function(int, LPSCARD_ATRMASK, int, LPSCARD_READERSTATEW, int)>();

  int SCardGetStatusChangeA(
    int hContext,
    int dwTimeout,
    LPSCARD_READERSTATEA rgReaderStates,
    int cReaders,
  ) {
    return _SCardGetStatusChangeA(
      hContext,
      dwTimeout,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardGetStatusChangeAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, DWORD, LPSCARD_READERSTATEA,
              DWORD)>>('SCardGetStatusChangeA');
  late final _SCardGetStatusChangeA = _SCardGetStatusChangeAPtr.asFunction<
      int Function(int, int, LPSCARD_READERSTATEA, int)>();

  int SCardGetStatusChangeW(
    int hContext,
    int dwTimeout,
    LPSCARD_READERSTATEW rgReaderStates,
    int cReaders,
  ) {
    return _SCardGetStatusChangeW(
      hContext,
      dwTimeout,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardGetStatusChangeWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, DWORD, LPSCARD_READERSTATEW,
              DWORD)>>('SCardGetStatusChangeW');
  late final _SCardGetStatusChangeW = _SCardGetStatusChangeWPtr.asFunction<
      int Function(int, int, LPSCARD_READERSTATEW, int)>();

  int SCardCancel(
    int hContext,
  ) {
    return _SCardCancel(
      hContext,
    );
  }

  late final _SCardCancelPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>('SCardCancel');
  late final _SCardCancel = _SCardCancelPtr.asFunction<int Function(int)>();

  int SCardConnectA(
    int hContext,
    LPCSTR szReader,
    int dwShareMode,
    int dwPreferredProtocols,
    LPSCARDHANDLE phCard,
    LPDWORD pdwActiveProtocol,
  ) {
    return _SCardConnectA(
      hContext,
      szReader,
      dwShareMode,
      dwPreferredProtocols,
      phCard,
      pdwActiveProtocol,
    );
  }

  late final _SCardConnectAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCSTR, DWORD, DWORD, LPSCARDHANDLE,
              LPDWORD)>>('SCardConnectA');
  late final _SCardConnectA = _SCardConnectAPtr.asFunction<
      int Function(int, LPCSTR, int, int, LPSCARDHANDLE, LPDWORD)>();

  int SCardConnectW(
    int hContext,
    LPCWSTR szReader,
    int dwShareMode,
    int dwPreferredProtocols,
    LPSCARDHANDLE phCard,
    LPDWORD pdwActiveProtocol,
  ) {
    return _SCardConnectW(
      hContext,
      szReader,
      dwShareMode,
      dwPreferredProtocols,
      phCard,
      pdwActiveProtocol,
    );
  }

  late final _SCardConnectWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, DWORD, DWORD, LPSCARDHANDLE,
              LPDWORD)>>('SCardConnectW');
  late final _SCardConnectW = _SCardConnectWPtr.asFunction<
      int Function(int, LPCWSTR, int, int, LPSCARDHANDLE, LPDWORD)>();

  int SCardReconnect(
    int hCard,
    int dwShareMode,
    int dwPreferredProtocols,
    int dwInitialization,
    LPDWORD pdwActiveProtocol,
  ) {
    return _SCardReconnect(
      hCard,
      dwShareMode,
      dwPreferredProtocols,
      dwInitialization,
      pdwActiveProtocol,
    );
  }

  late final _SCardReconnectPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDHANDLE, DWORD, DWORD, DWORD, LPDWORD)>>('SCardReconnect');
  late final _SCardReconnect = _SCardReconnectPtr.asFunction<
      int Function(int, int, int, int, LPDWORD)>();

  int SCardDisconnect(
    int hCard,
    int dwDisposition,
  ) {
    return _SCardDisconnect(
      hCard,
      dwDisposition,
    );
  }

  late final _SCardDisconnectPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE, DWORD)>>(
          'SCardDisconnect');
  late final _SCardDisconnect =
      _SCardDisconnectPtr.asFunction<int Function(int, int)>();

  int SCardBeginTransaction(
    int hCard,
  ) {
    return _SCardBeginTransaction(
      hCard,
    );
  }

  late final _SCardBeginTransactionPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE)>>(
          'SCardBeginTransaction');
  late final _SCardBeginTransaction =
      _SCardBeginTransactionPtr.asFunction<int Function(int)>();

  int SCardEndTransaction(
    int hCard,
    int dwDisposition,
  ) {
    return _SCardEndTransaction(
      hCard,
      dwDisposition,
    );
  }

  late final _SCardEndTransactionPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE, DWORD)>>(
          'SCardEndTransaction');
  late final _SCardEndTransaction =
      _SCardEndTransactionPtr.asFunction<int Function(int, int)>();

  int SCardCancelTransaction(
    int hCard,
  ) {
    return _SCardCancelTransaction(
      hCard,
    );
  }

  late final _SCardCancelTransactionPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE)>>(
          'SCardCancelTransaction');
  late final _SCardCancelTransaction =
      _SCardCancelTransactionPtr.asFunction<int Function(int)>();

  int SCardState(
    int hCard,
    LPDWORD pdwState,
    LPDWORD pdwProtocol,
    LPBYTE pbAtr,
    LPDWORD pcbAtrLen,
  ) {
    return _SCardState(
      hCard,
      pdwState,
      pdwProtocol,
      pbAtr,
      pcbAtrLen,
    );
  }

  late final _SCardStatePtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDHANDLE, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>>('SCardState');
  late final _SCardState = _SCardStatePtr.asFunction<
      int Function(int, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int SCardStatusA(
    int hCard,
    LPSTR mszReaderNames,
    LPDWORD pcchReaderLen,
    LPDWORD pdwState,
    LPDWORD pdwProtocol,
    LPBYTE pbAtr,
    LPDWORD pcbAtrLen,
  ) {
    return _SCardStatusA(
      hCard,
      mszReaderNames,
      pcchReaderLen,
      pdwState,
      pdwProtocol,
      pbAtr,
      pcbAtrLen,
    );
  }

  late final _SCardStatusAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE,
              LPDWORD)>>('SCardStatusA');
  late final _SCardStatusA = _SCardStatusAPtr.asFunction<
      int Function(int, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int SCardStatusW(
    int hCard,
    LPWSTR mszReaderNames,
    LPDWORD pcchReaderLen,
    LPDWORD pdwState,
    LPDWORD pdwProtocol,
    LPBYTE pbAtr,
    LPDWORD pcbAtrLen,
  ) {
    return _SCardStatusW(
      hCard,
      mszReaderNames,
      pcchReaderLen,
      pdwState,
      pdwProtocol,
      pbAtr,
      pcbAtrLen,
    );
  }

  late final _SCardStatusWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE,
              LPDWORD)>>('SCardStatusW');
  late final _SCardStatusW = _SCardStatusWPtr.asFunction<
      int Function(int, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int SCardTransmit(
    int hCard,
    LPCSCARD_IO_REQUEST pioSendPci,
    LPCBYTE pbSendBuffer,
    int cbSendLength,
    LPSCARD_IO_REQUEST pioRecvPci,
    LPBYTE pbRecvBuffer,
    LPDWORD pcbRecvLength,
  ) {
    return _SCardTransmit(
      hCard,
      pioSendPci,
      pbSendBuffer,
      cbSendLength,
      pioRecvPci,
      pbRecvBuffer,
      pcbRecvLength,
    );
  }

  late final _SCardTransmitPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, LPCSCARD_IO_REQUEST, LPCBYTE, DWORD,
              LPSCARD_IO_REQUEST, LPBYTE, LPDWORD)>>('SCardTransmit');
  late final _SCardTransmit = _SCardTransmitPtr.asFunction<
      int Function(int, LPCSCARD_IO_REQUEST, LPCBYTE, int, LPSCARD_IO_REQUEST,
          LPBYTE, LPDWORD)>();

  int SCardGetTransmitCount(
    int hCard,
    LPDWORD pcTransmitCount,
  ) {
    return _SCardGetTransmitCount(
      hCard,
      pcTransmitCount,
    );
  }

  late final _SCardGetTransmitCountPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE, LPDWORD)>>(
          'SCardGetTransmitCount');
  late final _SCardGetTransmitCount =
      _SCardGetTransmitCountPtr.asFunction<int Function(int, LPDWORD)>();

  /// /////////////////////////////////////////////////////////////////////////////
  int SCardControl(
    int hCard,
    int dwControlCode,
    LPCVOID lpInBuffer,
    int cbInBufferSize,
    LPVOID lpOutBuffer,
    int cbOutBufferSize,
    LPDWORD lpBytesReturned,
  ) {
    return _SCardControl(
      hCard,
      dwControlCode,
      lpInBuffer,
      cbInBufferSize,
      lpOutBuffer,
      cbOutBufferSize,
      lpBytesReturned,
    );
  }

  late final _SCardControlPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, DWORD, LPCVOID, DWORD, LPVOID, DWORD,
              LPDWORD)>>('SCardControl');
  late final _SCardControl = _SCardControlPtr.asFunction<
      int Function(int, int, LPCVOID, int, LPVOID, int, LPDWORD)>();

  int SCardGetAttrib(
    int hCard,
    int dwAttrId,
    LPBYTE pbAttr,
    LPDWORD pcbAttrLen,
  ) {
    return _SCardGetAttrib(
      hCard,
      dwAttrId,
      pbAttr,
      pcbAttrLen,
    );
  }

  late final _SCardGetAttribPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDHANDLE, DWORD, LPBYTE, LPDWORD)>>(
      'SCardGetAttrib');
  late final _SCardGetAttrib =
      _SCardGetAttribPtr.asFunction<int Function(int, int, LPBYTE, LPDWORD)>();

  int SCardSetAttrib(
    int hCard,
    int dwAttrId,
    LPCBYTE pbAttr,
    int cbAttrLen,
  ) {
    return _SCardSetAttrib(
      hCard,
      dwAttrId,
      pbAttr,
      cbAttrLen,
    );
  }

  late final _SCardSetAttribPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, DWORD, LPCBYTE, DWORD)>>('SCardSetAttrib');
  late final _SCardSetAttrib =
      _SCardSetAttribPtr.asFunction<int Function(int, int, LPCBYTE, int)>();

  int SCardUIDlgSelectCardA(
    LPOPENCARDNAME_EXA arg0,
  ) {
    return _SCardUIDlgSelectCardA(
      arg0,
    );
  }

  late final _SCardUIDlgSelectCardAPtr =
      _lookup<ffi.NativeFunction<LONG Function(LPOPENCARDNAME_EXA)>>(
          'SCardUIDlgSelectCardA');
  late final _SCardUIDlgSelectCardA =
      _SCardUIDlgSelectCardAPtr.asFunction<int Function(LPOPENCARDNAME_EXA)>();

  int SCardUIDlgSelectCardW(
    LPOPENCARDNAME_EXW arg0,
  ) {
    return _SCardUIDlgSelectCardW(
      arg0,
    );
  }

  late final _SCardUIDlgSelectCardWPtr =
      _lookup<ffi.NativeFunction<LONG Function(LPOPENCARDNAME_EXW)>>(
          'SCardUIDlgSelectCardW');
  late final _SCardUIDlgSelectCardW =
      _SCardUIDlgSelectCardWPtr.asFunction<int Function(LPOPENCARDNAME_EXW)>();

  int GetOpenCardNameA(
    LPOPENCARDNAMEA arg0,
  ) {
    return _GetOpenCardNameA(
      arg0,
    );
  }

  late final _GetOpenCardNameAPtr =
      _lookup<ffi.NativeFunction<LONG Function(LPOPENCARDNAMEA)>>(
          'GetOpenCardNameA');
  late final _GetOpenCardNameA =
      _GetOpenCardNameAPtr.asFunction<int Function(LPOPENCARDNAMEA)>();

  int GetOpenCardNameW(
    LPOPENCARDNAMEW arg0,
  ) {
    return _GetOpenCardNameW(
      arg0,
    );
  }

  late final _GetOpenCardNameWPtr =
      _lookup<ffi.NativeFunction<LONG Function(LPOPENCARDNAMEW)>>(
          'GetOpenCardNameW');
  late final _GetOpenCardNameW =
      _GetOpenCardNameWPtr.asFunction<int Function(LPOPENCARDNAMEW)>();

  int SCardDlgExtendedError() {
    return _SCardDlgExtendedError();
  }

  late final _SCardDlgExtendedErrorPtr =
      _lookup<ffi.NativeFunction<LONG Function()>>('SCardDlgExtendedError');
  late final _SCardDlgExtendedError =
      _SCardDlgExtendedErrorPtr.asFunction<int Function()>();

  int SCardReadCacheA(
    int hContext,
    ffi.Pointer<UUID> CardIdentifier,
    int FreshnessCounter,
    LPSTR LookupName,
    PBYTE Data,
    ffi.Pointer<DWORD> DataLen,
  ) {
    return _SCardReadCacheA(
      hContext,
      CardIdentifier,
      FreshnessCounter,
      LookupName,
      Data,
      DataLen,
    );
  }

  late final _SCardReadCacheAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, ffi.Pointer<UUID>, DWORD, LPSTR, PBYTE,
              ffi.Pointer<DWORD>)>>('SCardReadCacheA');
  late final _SCardReadCacheA = _SCardReadCacheAPtr.asFunction<
      int Function(
          int, ffi.Pointer<UUID>, int, LPSTR, PBYTE, ffi.Pointer<DWORD>)>();

  int SCardReadCacheW(
    int hContext,
    ffi.Pointer<UUID> CardIdentifier,
    int FreshnessCounter,
    LPWSTR LookupName,
    PBYTE Data,
    ffi.Pointer<DWORD> DataLen,
  ) {
    return _SCardReadCacheW(
      hContext,
      CardIdentifier,
      FreshnessCounter,
      LookupName,
      Data,
      DataLen,
    );
  }

  late final _SCardReadCacheWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, ffi.Pointer<UUID>, DWORD, LPWSTR, PBYTE,
              ffi.Pointer<DWORD>)>>('SCardReadCacheW');
  late final _SCardReadCacheW = _SCardReadCacheWPtr.asFunction<
      int Function(
          int, ffi.Pointer<UUID>, int, LPWSTR, PBYTE, ffi.Pointer<DWORD>)>();

  int SCardWriteCacheA(
    int hContext,
    ffi.Pointer<UUID> CardIdentifier,
    int FreshnessCounter,
    LPSTR LookupName,
    PBYTE Data,
    int DataLen,
  ) {
    return _SCardWriteCacheA(
      hContext,
      CardIdentifier,
      FreshnessCounter,
      LookupName,
      Data,
      DataLen,
    );
  }

  late final _SCardWriteCacheAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, ffi.Pointer<UUID>, DWORD, LPSTR, PBYTE,
              DWORD)>>('SCardWriteCacheA');
  late final _SCardWriteCacheA = _SCardWriteCacheAPtr.asFunction<
      int Function(int, ffi.Pointer<UUID>, int, LPSTR, PBYTE, int)>();

  int SCardWriteCacheW(
    int hContext,
    ffi.Pointer<UUID> CardIdentifier,
    int FreshnessCounter,
    LPWSTR LookupName,
    PBYTE Data,
    int DataLen,
  ) {
    return _SCardWriteCacheW(
      hContext,
      CardIdentifier,
      FreshnessCounter,
      LookupName,
      Data,
      DataLen,
    );
  }

  late final _SCardWriteCacheWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, ffi.Pointer<UUID>, DWORD, LPWSTR, PBYTE,
              DWORD)>>('SCardWriteCacheW');
  late final _SCardWriteCacheW = _SCardWriteCacheWPtr.asFunction<
      int Function(int, ffi.Pointer<UUID>, int, LPWSTR, PBYTE, int)>();

  int SCardGetReaderIconA(
    int hContext,
    LPCSTR szReaderName,
    LPBYTE pbIcon,
    LPDWORD pcbIcon,
  ) {
    return _SCardGetReaderIconA(
      hContext,
      szReaderName,
      pbIcon,
      pcbIcon,
    );
  }

  late final _SCardGetReaderIconAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDCONTEXT, LPCSTR, LPBYTE, LPDWORD)>>('SCardGetReaderIconA');
  late final _SCardGetReaderIconA = _SCardGetReaderIconAPtr.asFunction<
      int Function(int, LPCSTR, LPBYTE, LPDWORD)>();

  int SCardGetReaderIconW(
    int hContext,
    LPCWSTR szReaderName,
    LPBYTE pbIcon,
    LPDWORD pcbIcon,
  ) {
    return _SCardGetReaderIconW(
      hContext,
      szReaderName,
      pbIcon,
      pcbIcon,
    );
  }

  late final _SCardGetReaderIconWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDCONTEXT, LPCWSTR, LPBYTE, LPDWORD)>>('SCardGetReaderIconW');
  late final _SCardGetReaderIconW = _SCardGetReaderIconWPtr.asFunction<
      int Function(int, LPCWSTR, LPBYTE, LPDWORD)>();

  int SCardGetDeviceTypeIdA(
    int hContext,
    LPCSTR szReaderName,
    LPDWORD pdwDeviceTypeId,
  ) {
    return _SCardGetDeviceTypeIdA(
      hContext,
      szReaderName,
      pdwDeviceTypeId,
    );
  }

  late final _SCardGetDeviceTypeIdAPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPDWORD)>>(
          'SCardGetDeviceTypeIdA');
  late final _SCardGetDeviceTypeIdA = _SCardGetDeviceTypeIdAPtr.asFunction<
      int Function(int, LPCSTR, LPDWORD)>();

  int SCardGetDeviceTypeIdW(
    int hContext,
    LPCWSTR szReaderName,
    LPDWORD pdwDeviceTypeId,
  ) {
    return _SCardGetDeviceTypeIdW(
      hContext,
      szReaderName,
      pdwDeviceTypeId,
    );
  }

  late final _SCardGetDeviceTypeIdWPtr = _lookup<
          ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCWSTR, LPDWORD)>>(
      'SCardGetDeviceTypeIdW');
  late final _SCardGetDeviceTypeIdW = _SCardGetDeviceTypeIdWPtr.asFunction<
      int Function(int, LPCWSTR, LPDWORD)>();

  int SCardGetReaderDeviceInstanceIdA(
    int hContext,
    LPCSTR szReaderName,
    LPSTR szDeviceInstanceId,
    LPDWORD pcchDeviceInstanceId,
  ) {
    return _SCardGetReaderDeviceInstanceIdA(
      hContext,
      szReaderName,
      szDeviceInstanceId,
      pcchDeviceInstanceId,
    );
  }

  late final _SCardGetReaderDeviceInstanceIdAPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPSTR, LPDWORD)>>(
      'SCardGetReaderDeviceInstanceIdA');
  late final _SCardGetReaderDeviceInstanceIdA =
      _SCardGetReaderDeviceInstanceIdAPtr.asFunction<
          int Function(int, LPCSTR, LPSTR, LPDWORD)>();

  int SCardGetReaderDeviceInstanceIdW(
    int hContext,
    LPCWSTR szReaderName,
    LPWSTR szDeviceInstanceId,
    LPDWORD pcchDeviceInstanceId,
  ) {
    return _SCardGetReaderDeviceInstanceIdW(
      hContext,
      szReaderName,
      szDeviceInstanceId,
      pcchDeviceInstanceId,
    );
  }

  late final _SCardGetReaderDeviceInstanceIdWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, LPWSTR,
              LPDWORD)>>('SCardGetReaderDeviceInstanceIdW');
  late final _SCardGetReaderDeviceInstanceIdW =
      _SCardGetReaderDeviceInstanceIdWPtr.asFunction<
          int Function(int, LPCWSTR, LPWSTR, LPDWORD)>();

  int SCardListReadersWithDeviceInstanceIdA(
    int hContext,
    LPCSTR szDeviceInstanceId,
    LPSTR mszReaders,
    LPDWORD pcchReaders,
  ) {
    return _SCardListReadersWithDeviceInstanceIdA(
      hContext,
      szDeviceInstanceId,
      mszReaders,
      pcchReaders,
    );
  }

  late final _SCardListReadersWithDeviceInstanceIdAPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPSTR, LPDWORD)>>(
      'SCardListReadersWithDeviceInstanceIdA');
  late final _SCardListReadersWithDeviceInstanceIdA =
      _SCardListReadersWithDeviceInstanceIdAPtr.asFunction<
          int Function(int, LPCSTR, LPSTR, LPDWORD)>();

  int SCardListReadersWithDeviceInstanceIdW(
    int hContext,
    LPCWSTR szDeviceInstanceId,
    LPWSTR mszReaders,
    LPDWORD pcchReaders,
  ) {
    return _SCardListReadersWithDeviceInstanceIdW(
      hContext,
      szDeviceInstanceId,
      mszReaders,
      pcchReaders,
    );
  }

  late final _SCardListReadersWithDeviceInstanceIdWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCWSTR, LPWSTR,
              LPDWORD)>>('SCardListReadersWithDeviceInstanceIdW');
  late final _SCardListReadersWithDeviceInstanceIdW =
      _SCardListReadersWithDeviceInstanceIdWPtr.asFunction<
          int Function(int, LPCWSTR, LPWSTR, LPDWORD)>();

  int SCardAudit(
    int hContext,
    int dwEvent,
  ) {
    return _SCardAudit(
      hContext,
      dwEvent,
    );
  }

  late final _SCardAuditPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, DWORD)>>(
          'SCardAudit');
  late final _SCardAudit = _SCardAuditPtr.asFunction<int Function(int, int)>();
}

typedef SCARD_IO_REQUEST = _SCARD_IO_REQUEST;

class _SCARD_IO_REQUEST extends ffi.Struct {
  @DWORD()
  external int dwProtocol;

  @DWORD()
  external int cbPciLength;
}

typedef DWORD = ffi.Uint64;
typedef LONG = ffi.Int64;
typedef LPCVOID = ffi.Pointer<ffi.Void>;
typedef LPSCARDCONTEXT = ffi.Pointer<SCARDCONTEXT>;

/// /////////////////////////////////////////////////////////////////////////////
typedef SCARDCONTEXT = ULONG_PTR;
typedef ULONG_PTR = ffi.Uint64;
typedef LPSTR = ffi.Pointer<CHAR>;
typedef CHAR = ffi.Int8;
typedef LPDWORD = ffi.Pointer<DWORD>;
typedef LPWSTR = ffi.Pointer<WCHAR>;
typedef WCHAR = wchar_t;
typedef wchar_t = ffi.Uint16;
typedef LPCSTR = ffi.Pointer<CHAR>;
typedef LPCWSTR = ffi.Pointer<WCHAR>;
typedef LPCBYTE = ffi.Pointer<BYTE>;
typedef BYTE = ffi.Uint8;
typedef LPCGUID = ffi.Pointer<GUID>;
typedef GUID = _GUID;

class _GUID extends ffi.Struct {
  @ffi.Uint64()
  external int Data1;

  @ffi.Uint16()
  external int Data2;

  @ffi.Uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Data4;
}

typedef LPGUID = ffi.Pointer<GUID>;
typedef HANDLE = ffi.Pointer<ffi.Void>;

/// /////////////////////////////////////////////////////////////////////////////
class SCARD_READERSTATEA extends ffi.Struct {
  external LPCSTR szReader;

  external LPVOID pvUserData;

  @DWORD()
  external int dwCurrentState;

  @DWORD()
  external int dwEventState;

  @DWORD()
  external int cbAtr;

  @ffi.Array.multi([36])
  external ffi.Array<BYTE> rgbAtr;
}

typedef LPVOID = ffi.Pointer<ffi.Void>;

class SCARD_READERSTATEW extends ffi.Struct {
  external LPCWSTR szReader;

  external LPVOID pvUserData;

  @DWORD()
  external int dwCurrentState;

  @DWORD()
  external int dwEventState;

  @DWORD()
  external int cbAtr;

  @ffi.Array.multi([36])
  external ffi.Array<BYTE> rgbAtr;
}

/// /////////////////////////////////////////////////////////////////////////////
typedef LPSCARD_READERSTATEA = ffi.Pointer<SCARD_READERSTATEA>;
typedef LPSCARD_READERSTATEW = ffi.Pointer<SCARD_READERSTATEW>;

class _SCARD_ATRMASK extends ffi.Struct {
  @DWORD()
  external int cbAtr;

  @ffi.Array.multi([36])
  external ffi.Array<BYTE> rgbAtr;

  @ffi.Array.multi([36])
  external ffi.Array<BYTE> rgbMask;
}

typedef LPSCARD_ATRMASK = ffi.Pointer<_SCARD_ATRMASK>;
typedef LPSCARDHANDLE = ffi.Pointer<SCARDHANDLE>;
typedef SCARDHANDLE = ULONG_PTR;
typedef LPBYTE = ffi.Pointer<BYTE>;
typedef LPCSCARD_IO_REQUEST = ffi.Pointer<SCARD_IO_REQUEST>;
typedef LPSCARD_IO_REQUEST = ffi.Pointer<_SCARD_IO_REQUEST>;

class OPENCARD_SEARCH_CRITERIAA extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  external LPSTR lpstrGroupNames;

  @DWORD()
  external int nMaxGroupNames;

  external LPCGUID rgguidInterfaces;

  @DWORD()
  external int cguidInterfaces;

  external LPSTR lpstrCardNames;

  @DWORD()
  external int nMaxCardNames;

  external LPOCNCHKPROC lpfnCheck;

  external LPOCNCONNPROCA lpfnConnect;

  external LPOCNDSCPROC lpfnDisconnect;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;
}

typedef LPOCNCHKPROC = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(SCARDCONTEXT, SCARDHANDLE, PVOID)>>;
typedef BOOL = ffi.Int32;
typedef PVOID = ffi.Pointer<ffi.Void>;
typedef LPOCNCONNPROCA = ffi.Pointer<
    ffi
    .NativeFunction<SCARDHANDLE Function(SCARDCONTEXT, LPSTR, LPSTR, PVOID)>>;
typedef LPOCNDSCPROC = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(SCARDCONTEXT, SCARDHANDLE, PVOID)>>;

class OPENCARD_SEARCH_CRITERIAW extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  external LPWSTR lpstrGroupNames;

  @DWORD()
  external int nMaxGroupNames;

  external LPCGUID rgguidInterfaces;

  @DWORD()
  external int cguidInterfaces;

  external LPWSTR lpstrCardNames;

  @DWORD()
  external int nMaxCardNames;

  external LPOCNCHKPROC lpfnCheck;

  external LPOCNCONNPROCW lpfnConnect;

  external LPOCNDSCPROC lpfnDisconnect;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;
}

typedef LPOCNCONNPROCW = ffi.Pointer<
    ffi
    .NativeFunction<SCARDHANDLE Function(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID)>>;

class OPENCARDNAME_EXA extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  @SCARDCONTEXT()
  external int hSCardContext;

  external HWND hwndOwner;

  @DWORD()
  external int dwFlags;

  external LPCSTR lpstrTitle;

  external LPCSTR lpstrSearchDesc;

  external HICON hIcon;

  external POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;

  external LPOCNCONNPROCA lpfnConnect;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;

  external LPSTR lpstrRdr;

  @DWORD()
  external int nMaxRdr;

  external LPSTR lpstrCard;

  @DWORD()
  external int nMaxCard;

  @DWORD()
  external int dwActiveProtocol;

  @SCARDHANDLE()
  external int hCardHandle;
}

typedef HWND = ffi.Pointer<HWND__>;

class HWND__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

typedef HICON = ffi.Pointer<HICON__>;

class HICON__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

typedef POPENCARD_SEARCH_CRITERIAA = ffi.Pointer<OPENCARD_SEARCH_CRITERIAA>;

class OPENCARDNAME_EXW extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  @SCARDCONTEXT()
  external int hSCardContext;

  external HWND hwndOwner;

  @DWORD()
  external int dwFlags;

  external LPCWSTR lpstrTitle;

  external LPCWSTR lpstrSearchDesc;

  external HICON hIcon;

  external POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;

  external LPOCNCONNPROCW lpfnConnect;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;

  external LPWSTR lpstrRdr;

  @DWORD()
  external int nMaxRdr;

  external LPWSTR lpstrCard;

  @DWORD()
  external int nMaxCard;

  @DWORD()
  external int dwActiveProtocol;

  @SCARDHANDLE()
  external int hCardHandle;
}

typedef POPENCARD_SEARCH_CRITERIAW = ffi.Pointer<OPENCARD_SEARCH_CRITERIAW>;

abstract class READER_SEL_REQUEST_MATCH_TYPE {
  static const int RSR_MATCH_TYPE_READER_AND_CONTAINER = 1;
  static const int RSR_MATCH_TYPE_SERIAL_NUMBER = 2;
  static const int RSR_MATCH_TYPE_ALL_CARDS = 3;
}

class READER_SEL_REQUEST extends ffi.Struct {
  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;

  @ffi.Int32()
  external int MatchType;
}

class READER_SEL_RESPONSE extends ffi.Struct {
  @DWORD()
  external int cbReaderNameOffset;

  @DWORD()
  external int cchReaderNameLength;

  @DWORD()
  external int cbCardNameOffset;

  @DWORD()
  external int cchCardNameLength;
}

typedef LPOPENCARDNAME_EXA = ffi.Pointer<OPENCARDNAME_EXA>;
typedef LPOPENCARDNAME_EXW = ffi.Pointer<OPENCARDNAME_EXW>;

class OPENCARDNAMEA extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  external HWND hwndOwner;

  @SCARDCONTEXT()
  external int hSCardContext;

  external LPSTR lpstrGroupNames;

  @DWORD()
  external int nMaxGroupNames;

  external LPSTR lpstrCardNames;

  @DWORD()
  external int nMaxCardNames;

  external LPCGUID rgguidInterfaces;

  @DWORD()
  external int cguidInterfaces;

  external LPSTR lpstrRdr;

  @DWORD()
  external int nMaxRdr;

  external LPSTR lpstrCard;

  @DWORD()
  external int nMaxCard;

  external LPCSTR lpstrTitle;

  @DWORD()
  external int dwFlags;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;

  @DWORD()
  external int dwActiveProtocol;

  external LPOCNCONNPROCA lpfnConnect;

  external LPOCNCHKPROC lpfnCheck;

  external LPOCNDSCPROC lpfnDisconnect;

  @SCARDHANDLE()
  external int hCardHandle;
}

class OPENCARDNAMEW extends ffi.Struct {
  @DWORD()
  external int dwStructSize;

  external HWND hwndOwner;

  @SCARDCONTEXT()
  external int hSCardContext;

  external LPWSTR lpstrGroupNames;

  @DWORD()
  external int nMaxGroupNames;

  external LPWSTR lpstrCardNames;

  @DWORD()
  external int nMaxCardNames;

  external LPCGUID rgguidInterfaces;

  @DWORD()
  external int cguidInterfaces;

  external LPWSTR lpstrRdr;

  @DWORD()
  external int nMaxRdr;

  external LPWSTR lpstrCard;

  @DWORD()
  external int nMaxCard;

  external LPCWSTR lpstrTitle;

  @DWORD()
  external int dwFlags;

  external LPVOID pvUserData;

  @DWORD()
  external int dwShareMode;

  @DWORD()
  external int dwPreferredProtocols;

  @DWORD()
  external int dwActiveProtocol;

  external LPOCNCONNPROCW lpfnConnect;

  external LPOCNCHKPROC lpfnCheck;

  external LPOCNDSCPROC lpfnDisconnect;

  @SCARDHANDLE()
  external int hCardHandle;
}

typedef LPOPENCARDNAMEA = ffi.Pointer<OPENCARDNAMEA>;
typedef LPOPENCARDNAMEW = ffi.Pointer<OPENCARDNAMEW>;
typedef UUID = GUID;
typedef PBYTE = ffi.Pointer<BYTE>;

const int SCARD_AUTOALLOCATE = 4294967295;

const int SCARD_SCOPE_USER = 0;

const int SCARD_SCOPE_TERMINAL = 1;

const int SCARD_SCOPE_SYSTEM = 2;

const String SCARD_ALL_READERS = 'SCard\$AllReaders';

const String SCARD_DEFAULT_READERS = 'SCard\$DefaultReaders';

const String SCARD_LOCAL_READERS = 'SCard\$LocalReaders';

const String SCARD_SYSTEM_READERS = 'SCard\$SystemReaders';

const int SCARD_PROVIDER_PRIMARY = 1;

const int SCARD_PROVIDER_CSP = 2;

const int SCARD_PROVIDER_KSP = 3;

const int SCARD_STATE_UNAWARE = 0;

const int SCARD_STATE_IGNORE = 1;

const int SCARD_STATE_CHANGED = 2;

const int SCARD_STATE_UNKNOWN = 4;

const int SCARD_STATE_UNAVAILABLE = 8;

const int SCARD_STATE_EMPTY = 16;

const int SCARD_STATE_PRESENT = 32;

const int SCARD_STATE_ATRMATCH = 64;

const int SCARD_STATE_EXCLUSIVE = 128;

const int SCARD_STATE_INUSE = 256;

const int SCARD_STATE_MUTE = 512;

const int SCARD_STATE_UNPOWERED = 1024;

const int SCARD_SHARE_EXCLUSIVE = 1;

const int SCARD_SHARE_SHARED = 2;

const int SCARD_SHARE_DIRECT = 3;

const int SCARD_LEAVE_CARD = 0;

const int SCARD_RESET_CARD = 1;

const int SCARD_UNPOWER_CARD = 2;

const int SCARD_EJECT_CARD = 3;

const int SC_DLG_MINIMAL_UI = 1;

const int SC_DLG_NO_UI = 2;

const int SC_DLG_FORCE_UI = 4;

const int SCERR_NOCARDNAME = 16384;

const int SCERR_NOGUIDS = 32768;

const int SCARD_READER_SEL_AUTH_PACKAGE = 4294966667;

const int SCARD_AUDIT_CHV_FAILURE = 0;

const int SCARD_AUDIT_CHV_SUCCESS = 1;
